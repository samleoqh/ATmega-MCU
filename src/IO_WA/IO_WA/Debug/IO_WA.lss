
IO_WA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800200  000008d4  00000968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800226  00800226  0000098e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001699  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  00002291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001043  00000000  00000000  00002add  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00003b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe8  00000000  00000000  000044f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000054d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	7c c3       	rjmp	.+1784   	; 0x73e <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	b1 c3       	rjmp	.+1890   	; 0x7d8 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ed       	ldi	r30, 0xD4	; 212
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 32       	cpi	r26, 0x26	; 38
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e2       	ldi	r26, 0x26	; 38
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 33       	cpi	r26, 0x3D	; 61
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	07 d3       	rcall	.+1550   	; 0x72e <main>
 120:	d7 c3       	rjmp	.+1966   	; 0x8d0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Initialise_ADC>:
// 0 = ADCH (high) contains bit 1 = output bit 9, bit 0 = output bit 8. ADCL (low) contains output bits 7 through 0
// 1 = ADCH (high) contains bits 9 through 2. ADCL (low) contains bit 7 = output bit 1, bit 6 = output bit 0
// Bits 4:0 ?MUX4:0: Analog Channel and Gain Selection Bits (see 1281 manual p290)
// 00000 = ADC0 (ADC channel 0, single-ended input)
// 00010 = ADC2 (ADC channel 2, single-ended input)
ADMUX = 0b01100000;	// AVCC REF, Left-adjust output (Read most-significant 8 bits via ADCH), Convert channel 0
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
// 100 = division factor 16
// 101 = division factor 32
// 110 = division factor 64
// 111 = division factor 128

ADCSRA = 0b10101000;	// ADC enabled, Auto trigger, Interrupt enabled, Prescaler = 32
 12a:	88 ea       	ldi	r24, 0xA8	; 168
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
// 0 1 1 Timer/Counter0 Compare Match A
// 1 0 0 Timer/Counter0 Overflow
// 1 0 1 Timer/Counter1 Compare Match B
// 1 1 0 Timer/Counter1 Overflow
// 1 1 1 Timer/Counter1 Capture Event
ADCSRB &= 0b11110000;	// clear bits 3,2,1,0 (Free running mode)
 130:	eb e7       	ldi	r30, 0x7B	; 123
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	80 83       	st	Z, r24

// DIDR0 ?Digital Input Disable Register 0
// Bit 7:0 ?ADC7D:ADC0D: ADC7:0 Digital Input Disable
DIDR0 = 0b00000100;	// Disable digital input on bit 2
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>

// DIDR2 ?Digital Input Disable Register 2
// Bit 7:0 ?ADC15D:ADC8D: ADC15:8 Digital Input Disable
DIDR2 = 0b11111111;	// Disable digital input on all bits (64-pin version of ATmega1281 does not even have these inputs)
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 146:	08 95       	ret

00000148 <startADC>:

void startADC()
{
    //ADCSRA |= 0b01000000;	// start ADC conversion

	ADCSRA |= (1 << ADEN); // enable adc bit 7
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start conversion bit 6
 152:	80 81       	ld	r24, Z
 154:	80 64       	ori	r24, 0x40	; 64
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <lcd_read>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 15a:	cf 93       	push	r28
 15c:	88 23       	and	r24, r24
 15e:	31 f0       	breq	.+12     	; 0x16c <lcd_read+0x12>
 160:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 16a:	05 c0       	rjmp	.+10     	; 0x176 <lcd_read+0x1c>
 16c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 176:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 180:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end>
 184:	87 e0       	ldi	r24, 0x07	; 7
 186:	8d d1       	rcall	.+794    	; 0x4a2 <pcf8574_setoutput>
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	d4 d1       	rcall	.+936    	; 0x536 <pcf8574_setoutputpinhigh>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_read+0x36>
 190:	64 e0       	ldi	r22, 0x04	; 4
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	6f d1       	rcall	.+734    	; 0x474 <pcf8574_getoutputpin>
 196:	c8 2f       	mov	r28, r24
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	cf d1       	rcall	.+926    	; 0x53c <pcf8574_setoutputpinlow>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_read+0x46>
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	87 e0       	ldi	r24, 0x07	; 7
 1a4:	c8 d1       	rcall	.+912    	; 0x536 <pcf8574_setoutputpinhigh>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_read+0x4e>
 1a8:	64 e0       	ldi	r22, 0x04	; 4
 1aa:	87 e0       	ldi	r24, 0x07	; 7
 1ac:	63 d1       	rcall	.+710    	; 0x474 <pcf8574_getoutputpin>
 1ae:	c2 95       	swap	r28
 1b0:	c0 7f       	andi	r28, 0xF0	; 240
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	c8 2b       	or	r28, r24
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	c0 d1       	rcall	.+896    	; 0x53c <pcf8574_setoutputpinlow>
 1bc:	8c 2f       	mov	r24, r28
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_waitbusy>:
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	ca df       	rcall	.-108    	; 0x15a <lcd_read>
 1c6:	88 23       	and	r24, r24
 1c8:	e4 f3       	brlt	.-8      	; 0x1c2 <lcd_waitbusy>
 1ca:	88 e0       	ldi	r24, 0x08	; 8
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_waitbusy+0xc>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	c2 cf       	rjmp	.-124    	; 0x15a <lcd_read>
 1d6:	08 95       	ret

000001d8 <toggle_e>:
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	ac d1       	rcall	.+856    	; 0x536 <pcf8574_setoutputpinhigh>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <toggle_e+0x8>
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	87 e0       	ldi	r24, 0x07	; 7
 1e4:	ab c1       	rjmp	.+854    	; 0x53c <pcf8574_setoutputpinlow>
 1e6:	08 95       	ret

000001e8 <lcd_write>:
 1e8:	cf 93       	push	r28
 1ea:	c8 2f       	mov	r28, r24
 1ec:	66 23       	and	r22, r22
 1ee:	31 f0       	breq	.+12     	; 0x1fc <lcd_write+0x14>
 1f0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <lcd_write+0x1e>
 1fc:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 206:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 210:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end>
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	45 d1       	rcall	.+650    	; 0x4a2 <pcf8574_setoutput>
 218:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 21c:	8f 77       	andi	r24, 0x7F	; 127
 21e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 222:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 226:	8f 7b       	andi	r24, 0xBF	; 191
 228:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 22c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 230:	8f 7d       	andi	r24, 0xDF	; 223
 232:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 236:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 23a:	8f 7e       	andi	r24, 0xEF	; 239
 23c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 240:	cc 23       	and	r28, r28
 242:	2c f4       	brge	.+10     	; 0x24e <lcd_write+0x66>
 244:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 24e:	c6 ff       	sbrs	r28, 6
 250:	05 c0       	rjmp	.+10     	; 0x25c <lcd_write+0x74>
 252:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 256:	80 64       	ori	r24, 0x40	; 64
 258:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 25c:	c5 ff       	sbrs	r28, 5
 25e:	05 c0       	rjmp	.+10     	; 0x26a <lcd_write+0x82>
 260:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 264:	80 62       	ori	r24, 0x20	; 32
 266:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 26a:	c4 ff       	sbrs	r28, 4
 26c:	05 c0       	rjmp	.+10     	; 0x278 <lcd_write+0x90>
 26e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 272:	80 61       	ori	r24, 0x10	; 16
 274:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 278:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end>
 27c:	87 e0       	ldi	r24, 0x07	; 7
 27e:	11 d1       	rcall	.+546    	; 0x4a2 <pcf8574_setoutput>
 280:	ab df       	rcall	.-170    	; 0x1d8 <toggle_e>
 282:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 286:	8f 77       	andi	r24, 0x7F	; 127
 288:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 28c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 290:	8f 7b       	andi	r24, 0xBF	; 191
 292:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 296:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 29a:	8f 7d       	andi	r24, 0xDF	; 223
 29c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 2a0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 2a4:	8f 7e       	andi	r24, 0xEF	; 239
 2a6:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 2aa:	c3 ff       	sbrs	r28, 3
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <lcd_write+0xd0>
 2ae:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 2b8:	c2 ff       	sbrs	r28, 2
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <lcd_write+0xde>
 2bc:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 2c6:	c1 ff       	sbrs	r28, 1
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <lcd_write+0xec>
 2ca:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 2ce:	80 62       	ori	r24, 0x20	; 32
 2d0:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 2d4:	c0 ff       	sbrs	r28, 0
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <lcd_write+0xfa>
 2d8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 2dc:	80 61       	ori	r24, 0x10	; 16
 2de:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 2e2:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end>
 2e6:	87 e0       	ldi	r24, 0x07	; 7
 2e8:	dc d0       	rcall	.+440    	; 0x4a2 <pcf8574_setoutput>
 2ea:	76 df       	rcall	.-276    	; 0x1d8 <toggle_e>
 2ec:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 2f0:	80 61       	ori	r24, 0x10	; 16
 2f2:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 2f6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 2fa:	80 62       	ori	r24, 0x20	; 32
 2fc:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 300:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 304:	80 64       	ori	r24, 0x40	; 64
 306:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 30a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 314:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end>
 318:	87 e0       	ldi	r24, 0x07	; 7
 31a:	c3 d0       	rcall	.+390    	; 0x4a2 <pcf8574_setoutput>
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <lcd_command>:
 320:	cf 93       	push	r28
 322:	c8 2f       	mov	r28, r24
 324:	4e df       	rcall	.-356    	; 0x1c2 <lcd_waitbusy>
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	8c 2f       	mov	r24, r28
 32a:	5e df       	rcall	.-324    	; 0x1e8 <lcd_write>
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <lcd_gotoxy>:
 330:	61 11       	cpse	r22, r1
 332:	03 c0       	rjmp	.+6      	; 0x33a <lcd_gotoxy+0xa>
 334:	80 58       	subi	r24, 0x80	; 128
 336:	f4 cf       	rjmp	.-24     	; 0x320 <lcd_command>
 338:	08 95       	ret
 33a:	80 54       	subi	r24, 0x40	; 64
 33c:	f1 cf       	rjmp	.-30     	; 0x320 <lcd_command>
 33e:	08 95       	ret

00000340 <lcd_clrscr>:
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	ee cf       	rjmp	.-36     	; 0x320 <lcd_command>
 344:	08 95       	ret

00000346 <lcd_led>:
 346:	88 23       	and	r24, r24
 348:	31 f0       	breq	.+12     	; 0x356 <lcd_led+0x10>
 34a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 34e:	87 7f       	andi	r24, 0xF7	; 247
 350:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 354:	05 c0       	rjmp	.+10     	; 0x360 <lcd_led+0x1a>
 356:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 35a:	88 60       	ori	r24, 0x08	; 8
 35c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 360:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end>
 364:	87 e0       	ldi	r24, 0x07	; 7
 366:	9d c0       	rjmp	.+314    	; 0x4a2 <pcf8574_setoutput>
 368:	08 95       	ret

0000036a <lcd_home>:
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	d9 cf       	rjmp	.-78     	; 0x320 <lcd_command>
 36e:	08 95       	ret

00000370 <lcd_putc>:
 370:	cf 93       	push	r28
 372:	c8 2f       	mov	r28, r24
 374:	26 df       	rcall	.-436    	; 0x1c2 <lcd_waitbusy>
 376:	ca 30       	cpi	r28, 0x0A	; 10
 378:	41 f4       	brne	.+16     	; 0x38a <lcd_putc+0x1a>
 37a:	80 34       	cpi	r24, 0x40	; 64
 37c:	10 f0       	brcs	.+4      	; 0x382 <lcd_putc+0x12>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	01 c0       	rjmp	.+2      	; 0x384 <lcd_putc+0x14>
 382:	80 e4       	ldi	r24, 0x40	; 64
 384:	80 58       	subi	r24, 0x80	; 128
 386:	cc df       	rcall	.-104    	; 0x320 <lcd_command>
 388:	0f c0       	rjmp	.+30     	; 0x3a8 <lcd_putc+0x38>
 38a:	80 31       	cpi	r24, 0x10	; 16
 38c:	21 f4       	brne	.+8      	; 0x396 <lcd_putc+0x26>
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	80 ec       	ldi	r24, 0xC0	; 192
 392:	2a df       	rcall	.-428    	; 0x1e8 <lcd_write>
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <lcd_putc+0x30>
 396:	80 35       	cpi	r24, 0x50	; 80
 398:	19 f4       	brne	.+6      	; 0x3a0 <lcd_putc+0x30>
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	24 df       	rcall	.-440    	; 0x1e8 <lcd_write>
 3a0:	10 df       	rcall	.-480    	; 0x1c2 <lcd_waitbusy>
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	8c 2f       	mov	r24, r28
 3a6:	20 df       	rcall	.-448    	; 0x1e8 <lcd_write>
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <lcd_puts>:
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
 3b2:	21 96       	adiw	r28, 0x01	; 1
 3b4:	fc 01       	movw	r30, r24
 3b6:	80 81       	ld	r24, Z
 3b8:	88 23       	and	r24, r24
 3ba:	21 f0       	breq	.+8      	; 0x3c4 <lcd_puts+0x18>
 3bc:	d9 df       	rcall	.-78     	; 0x370 <lcd_putc>
 3be:	89 91       	ld	r24, Y+
 3c0:	81 11       	cpse	r24, r1
 3c2:	fc cf       	rjmp	.-8      	; 0x3bc <lcd_puts+0x10>
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	18 2f       	mov	r17, r24
	#if LCD_PCF8574_INIT == 1
	//init pcf8574
	pcf8574_init();
 3d2:	40 d0       	rcall	.+128    	; 0x454 <pcf8574_init>
	#endif

	dataport = 0;
 3d4:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <__data_end>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 3d8:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end>
 3dc:	87 e0       	ldi	r24, 0x07	; 7
 3de:	61 d0       	rcall	.+194    	; 0x4a2 <pcf8574_setoutput>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	9a ef       	ldi	r25, 0xFA	; 250
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_init+0x1a>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 3e8:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <__data_end>
 3ec:	90 62       	ori	r25, 0x20	; 32
 3ee:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <__data_end>
    dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 3f2:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <__data_end>
 3f6:	90 61       	ori	r25, 0x10	; 16
 3f8:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 3fc:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end>
 400:	87 e0       	ldi	r24, 0x07	; 7
 402:	4f d0       	rcall	.+158    	; 0x4a2 <pcf8574_setoutput>

    lcd_e_toggle();
 404:	e9 de       	rcall	.-558    	; 0x1d8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 406:	e0 e0       	ldi	r30, 0x00	; 0
 408:	fe e4       	ldi	r31, 0x4E	; 78
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>

    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 40e:	e4 de       	rcall	.-568    	; 0x1d8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 410:	c0 e0       	ldi	r28, 0x00	; 0
 412:	d1 e0       	ldi	r29, 0x01	; 1
 414:	fe 01       	movw	r30, r28
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 41a:	de de       	rcall	.-580    	; 0x1d8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 41c:	fe 01       	movw	r30, r28
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
 422:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <__data_end>
 426:	9f 7e       	andi	r25, 0xEF	; 239
 428:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
 42c:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__data_end>
 430:	87 e0       	ldi	r24, 0x07	; 7
 432:	37 d0       	rcall	.+110    	; 0x4a2 <pcf8574_setoutput>
    lcd_e_toggle();
 434:	d1 de       	rcall	.-606    	; 0x1d8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 436:	21 97       	sbiw	r28, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
    lcd_e_toggle();
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 43a:	88 e2       	ldi	r24, 0x28	; 40
 43c:	71 df       	rcall	.-286    	; 0x320 <lcd_command>

    lcd_command(LCD_DISP_OFF);              /* display off                  */
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	6f df       	rcall	.-290    	; 0x320 <lcd_command>
    lcd_clrscr();                           /* display clear                */
 442:	7e df       	rcall	.-260    	; 0x340 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 444:	86 e0       	ldi	r24, 0x06	; 6
 446:	6c df       	rcall	.-296    	; 0x320 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 448:	81 2f       	mov	r24, r17
 44a:	6a df       	rcall	.-300    	; 0x320 <lcd_command>

}/* lcd_init */
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	08 95       	ret

00000454 <pcf8574_init>:
		i2c_write(b);
		i2c_stop();
		return 0;
	}
	return -1;
}
 454:	76 d0       	rcall	.+236    	; 0x542 <i2c_init>
 456:	85 e3       	ldi	r24, 0x35	; 53
 458:	8a 95       	dec	r24
 45a:	f1 f7       	brne	.-4      	; 0x458 <pcf8574_init+0x4>
 45c:	00 00       	nop
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	fc 01       	movw	r30, r24
 464:	e5 5d       	subi	r30, 0xD5	; 213
 466:	fd 4f       	sbci	r31, 0xFD	; 253
 468:	10 82       	st	Z, r1
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	88 30       	cpi	r24, 0x08	; 8
 46e:	91 05       	cpc	r25, r1
 470:	c1 f7       	brne	.-16     	; 0x462 <pcf8574_init+0xe>
 472:	08 95       	ret

00000474 <pcf8574_getoutputpin>:
 474:	88 30       	cpi	r24, 0x08	; 8
 476:	88 f4       	brcc	.+34     	; 0x49a <pcf8574_getoutputpin+0x26>
 478:	68 30       	cpi	r22, 0x08	; 8
 47a:	88 f4       	brcc	.+34     	; 0x49e <pcf8574_getoutputpin+0x2a>
 47c:	e8 2f       	mov	r30, r24
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	e5 5d       	subi	r30, 0xD5	; 213
 482:	fd 4f       	sbci	r31, 0xFD	; 253
 484:	80 81       	ld	r24, Z
 486:	08 2e       	mov	r0, r24
 488:	00 0c       	add	r0, r0
 48a:	99 0b       	sbc	r25, r25
 48c:	02 c0       	rjmp	.+4      	; 0x492 <pcf8574_getoutputpin+0x1e>
 48e:	95 95       	asr	r25
 490:	87 95       	ror	r24
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <pcf8574_getoutputpin+0x1a>
 496:	81 70       	andi	r24, 0x01	; 1
 498:	08 95       	ret
 49a:	8f ef       	ldi	r24, 0xFF	; 255
 49c:	08 95       	ret
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <pcf8574_setoutput>:
 4a2:	cf 93       	push	r28
 4a4:	88 30       	cpi	r24, 0x08	; 8
 4a6:	80 f4       	brcc	.+32     	; 0x4c8 <pcf8574_setoutput+0x26>
 4a8:	c6 2f       	mov	r28, r22
 4aa:	98 2f       	mov	r25, r24
 4ac:	e8 2f       	mov	r30, r24
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	e5 5d       	subi	r30, 0xD5	; 213
 4b2:	fd 4f       	sbci	r31, 0xFD	; 253
 4b4:	60 83       	st	Z, r22
 4b6:	80 e2       	ldi	r24, 0x20	; 32
 4b8:	89 0f       	add	r24, r25
 4ba:	88 0f       	add	r24, r24
 4bc:	48 d0       	rcall	.+144    	; 0x54e <i2c_start>
 4be:	8c 2f       	mov	r24, r28
 4c0:	76 d0       	rcall	.+236    	; 0x5ae <i2c_write>
 4c2:	6c d0       	rcall	.+216    	; 0x59c <i2c_stop>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <pcf8574_setoutput+0x28>
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <pcf8574_setoutputpin>:

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data) {
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
 4d2:	88 30       	cpi	r24, 0x08	; 8
 4d4:	50 f5       	brcc	.+84     	; 0x52a <pcf8574_setoutputpin+0x5c>
 4d6:	68 30       	cpi	r22, 0x08	; 8
 4d8:	50 f5       	brcc	.+84     	; 0x52e <pcf8574_setoutputpin+0x60>
	    uint8_t b = 0;
	    b = pcf8574_pinstatus[deviceid];
 4da:	28 2f       	mov	r18, r24
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	f9 01       	movw	r30, r18
 4e0:	e5 5d       	subi	r30, 0xD5	; 213
 4e2:	fd 4f       	sbci	r31, 0xFD	; 253
 4e4:	90 81       	ld	r25, Z
	    b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
 4e6:	44 23       	and	r20, r20
 4e8:	49 f0       	breq	.+18     	; 0x4fc <pcf8574_setoutputpin+0x2e>
 4ea:	c1 e0       	ldi	r28, 0x01	; 1
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <pcf8574_setoutputpin+0x26>
 4f0:	cc 0f       	add	r28, r28
 4f2:	dd 1f       	adc	r29, r29
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <pcf8574_setoutputpin+0x22>
 4f8:	c9 2b       	or	r28, r25
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <pcf8574_setoutputpin+0x40>
 4fc:	c1 e0       	ldi	r28, 0x01	; 1
 4fe:	d0 e0       	ldi	r29, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <pcf8574_setoutputpin+0x38>
 502:	cc 0f       	add	r28, r28
 504:	dd 1f       	adc	r29, r29
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <pcf8574_setoutputpin+0x34>
 50a:	c0 95       	com	r28
 50c:	c9 23       	and	r28, r25
 50e:	98 2f       	mov	r25, r24
	    pcf8574_pinstatus[deviceid] = b;
 510:	f9 01       	movw	r30, r18
 512:	e5 5d       	subi	r30, 0xD5	; 213
 514:	fd 4f       	sbci	r31, 0xFD	; 253
 516:	c0 83       	st	Z, r28
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	89 0f       	add	r24, r25
 51c:	88 0f       	add	r24, r24
 51e:	17 d0       	rcall	.+46     	; 0x54e <i2c_start>
		i2c_write(b);
 520:	8c 2f       	mov	r24, r28
 522:	45 d0       	rcall	.+138    	; 0x5ae <i2c_write>
		i2c_stop();
 524:	3b d0       	rcall	.+118    	; 0x59c <i2c_stop>
		return 0;
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	03 c0       	rjmp	.+6      	; 0x530 <pcf8574_setoutputpin+0x62>
	}
	return -1;
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	01 c0       	rjmp	.+2      	; 0x530 <pcf8574_setoutputpin+0x62>
 52e:	8f ef       	ldi	r24, 0xFF	; 255
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <pcf8574_setoutputpinhigh>:

/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 1);
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	ca cf       	rjmp	.-108    	; 0x4ce <pcf8574_setoutputpin>
}
 53a:	08 95       	ret

0000053c <pcf8574_setoutputpinlow>:

/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 0);
 53c:	40 e0       	ldi	r20, 0x00	; 0
 53e:	c7 cf       	rjmp	.-114    	; 0x4ce <pcf8574_setoutputpin>
}
 540:	08 95       	ret

00000542 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 542:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 546:	82 e1       	ldi	r24, 0x12	; 18
 548:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 54c:	08 95       	ret

0000054e <i2c_start>:
 54e:	94 ea       	ldi	r25, 0xA4	; 164
 550:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 554:	ec eb       	ldi	r30, 0xBC	; 188
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	90 81       	ld	r25, Z
 55a:	99 23       	and	r25, r25
 55c:	ec f7       	brge	.-6      	; 0x558 <i2c_start+0xa>
 55e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 562:	98 7f       	andi	r25, 0xF8	; 248
 564:	98 30       	cpi	r25, 0x08	; 8
 566:	11 f0       	breq	.+4      	; 0x56c <i2c_start+0x1e>
 568:	90 31       	cpi	r25, 0x10	; 16
 56a:	a1 f4       	brne	.+40     	; 0x594 <i2c_start+0x46>
 56c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 570:	84 e8       	ldi	r24, 0x84	; 132
 572:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 576:	ec eb       	ldi	r30, 0xBC	; 188
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	88 23       	and	r24, r24
 57e:	ec f7       	brge	.-6      	; 0x57a <i2c_start+0x2c>
 580:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 584:	98 7f       	andi	r25, 0xF8	; 248
 586:	98 31       	cpi	r25, 0x18	; 24
 588:	39 f0       	breq	.+14     	; 0x598 <i2c_start+0x4a>
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 34       	cpi	r25, 0x40	; 64
 58e:	29 f4       	brne	.+10     	; 0x59a <i2c_start+0x4c>
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	08 95       	ret
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	08 95       	ret

0000059c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 59c:	84 e9       	ldi	r24, 0x94	; 148
 59e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 5a2:	ec eb       	ldi	r30, 0xBC	; 188
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	84 fd       	sbrc	r24, 4
 5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <i2c_stop+0xa>

}/* i2c_stop */
 5ac:	08 95       	ret

000005ae <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 5ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 5b2:	84 e8       	ldi	r24, 0x84	; 132
 5b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 5b8:	ec eb       	ldi	r30, 0xBC	; 188
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	88 23       	and	r24, r24
 5c0:	ec f7       	brge	.-6      	; 0x5bc <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 5c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 5c6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	98 32       	cpi	r25, 0x28	; 40
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <i2c_write+0x22>
 5ce:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 5d0:	08 95       	ret

000005d2 <Start_LCD>:
}


void Start_LCD()
{
	lcd_init(LCD_DISP_ON);
 5d2:	8c e0       	ldi	r24, 0x0C	; 12
 5d4:	fa de       	rcall	.-524    	; 0x3ca <lcd_init>
	lcd_home();
 5d6:	c9 de       	rcall	.-622    	; 0x36a <lcd_home>
	lcd_puts("**Welcome OSC**");
 5d8:	85 e0       	ldi	r24, 0x05	; 5
 5da:	92 e0       	ldi	r25, 0x02	; 2
 5dc:	e7 de       	rcall	.-562    	; 0x3ac <lcd_puts>
	lcd_led(0);
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	b2 de       	rcall	.-668    	; 0x346 <lcd_led>
	lcd_gotoxy(0, 1);
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	a4 de       	rcall	.-696    	; 0x330 <lcd_gotoxy>
	lcd_puts ("SR:");
 5e8:	85 e1       	ldi	r24, 0x15	; 21
 5ea:	92 e0       	ldi	r25, 0x02	; 2
 5ec:	df de       	rcall	.-578    	; 0x3ac <lcd_puts>
	lcd_gotoxy(5, 1);
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	85 e0       	ldi	r24, 0x05	; 5
 5f2:	9e de       	rcall	.-708    	; 0x330 <lcd_gotoxy>
	lcd_puts ("k");
 5f4:	89 e1       	ldi	r24, 0x19	; 25
 5f6:	92 e0       	ldi	r25, 0x02	; 2
 5f8:	d9 de       	rcall	.-590    	; 0x3ac <lcd_puts>
	lcd_gotoxy(7, 1);
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	87 e0       	ldi	r24, 0x07	; 7
 5fe:	98 de       	rcall	.-720    	; 0x330 <lcd_gotoxy>
	lcd_puts ("FQ:");
 600:	8b e1       	ldi	r24, 0x1B	; 27
 602:	92 e0       	ldi	r25, 0x02	; 2
 604:	d3 de       	rcall	.-602    	; 0x3ac <lcd_puts>
	lcd_gotoxy(14, 1);
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	8e e0       	ldi	r24, 0x0E	; 14
 60a:	92 de       	rcall	.-732    	; 0x330 <lcd_gotoxy>
	lcd_puts ("hz");
 60c:	8f e1       	ldi	r24, 0x1F	; 31
 60e:	92 e0       	ldi	r25, 0x02	; 2
 610:	cd ce       	rjmp	.-614    	; 0x3ac <lcd_puts>
 612:	08 95       	ret

00000614 <ButtonEvents>:
}

void ButtonEvents()
{
	unsigned char temp;	
	if (PINB & 0x01)
 614:	18 9b       	sbis	0x03, 0	; 3
 616:	10 c0       	rjmp	.+32     	; 0x638 <ButtonEvents+0x24>
	{
		if(pressed)
 618:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressed>
 61c:	88 23       	and	r24, r24
 61e:	99 f0       	breq	.+38     	; 0x646 <ButtonEvents+0x32>
		{
			btn_count++;
 620:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <btn_count>
 624:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <btn_count+0x1>
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <btn_count+0x1>
 62e:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <btn_count>
			pressed = false;
 632:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <pressed>
 636:	07 c0       	rjmp	.+14     	; 0x646 <ButtonEvents+0x32>
		}
	}		
	else 
	{
		if(!pressed)	
 638:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <pressed>
 63c:	81 11       	cpse	r24, r1
 63e:	03 c0       	rjmp	.+6      	; 0x646 <ButtonEvents+0x32>
			pressed = true;			
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <pressed>
	}
	
	temp = btn_count % 2;
 646:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <btn_count>
 64a:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <btn_count+0x1>
 64e:	81 70       	andi	r24, 0x01	; 1
 650:	90 78       	andi	r25, 0x80	; 128
 652:	99 23       	and	r25, r25
 654:	24 f4       	brge	.+8      	; 0x65e <ButtonEvents+0x4a>
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	8e 6f       	ori	r24, 0xFE	; 254
 65a:	9f 6f       	ori	r25, 0xFF	; 255
 65c:	01 96       	adiw	r24, 0x01	; 1

	PORTC = (PORTC & ~0x01) | (temp & 0x01); // lit on or off 
 65e:	80 fd       	sbrc	r24, 0
 660:	40 9a       	sbi	0x08, 0	; 8
 662:	80 ff       	sbrs	r24, 0
 664:	40 98       	cbi	0x08, 0	; 8

	if (temp & 0x01)
 666:	80 ff       	sbrs	r24, 0
 668:	0c c0       	rjmp	.+24     	; 0x682 <ButtonEvents+0x6e>
	{
		if (adc_stopped)
 66a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <adc_stopped>
 66e:	88 23       	and	r24, r24
 670:	09 f4       	brne	.+2      	; 0x674 <ButtonEvents+0x60>
 672:	40 c0       	rjmp	.+128    	; 0x6f4 <ButtonEvents+0xe0>
		{
			startADC();
 674:	69 dd       	rcall	.-1326   	; 0x148 <startADC>
			ADMUX = CHANNEL1;	
 676:	81 e6       	ldi	r24, 0x61	; 97
 678:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
			adc_stopped = false;
 67c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <adc_stopped>
 680:	08 95       	ret
		}
	}
	else
	{	
		if (!adc_stopped)
 682:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <adc_stopped>
 686:	81 11       	cpse	r24, r1
 688:	30 c0       	rjmp	.+96     	; 0x6ea <ButtonEvents+0xd6>
		{
			//stopADC();
			ADMUX = CHANNEL0;	
 68a:	80 e6       	ldi	r24, 0x60	; 96
 68c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
			adc_stopped = true;
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <adc_stopped>
 696:	29 c0       	rjmp	.+82     	; 0x6ea <ButtonEvents+0xd6>
	}

	if(adc_stopped)
	{
		if (sample_flag < 50)
		   sample_rate = 1;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <sample_rate+0x1>
 6a0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <sample_rate>
 6a4:	08 95       	ret
		else if (sample_flag < 100)
 6a6:	84 36       	cpi	r24, 0x64	; 100
 6a8:	38 f4       	brcc	.+14     	; 0x6b8 <ButtonEvents+0xa4>
			sample_rate = 3;
 6aa:	83 e0       	ldi	r24, 0x03	; 3
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <sample_rate+0x1>
 6b2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <sample_rate>
 6b6:	08 95       	ret
		else if (sample_flag < 150)
 6b8:	86 39       	cpi	r24, 0x96	; 150
 6ba:	38 f4       	brcc	.+14     	; 0x6ca <ButtonEvents+0xb6>
			sample_rate = 5;
 6bc:	85 e0       	ldi	r24, 0x05	; 5
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <sample_rate+0x1>
 6c4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <sample_rate>
 6c8:	08 95       	ret
		else if (sample_flag < 200)
 6ca:	88 3c       	cpi	r24, 0xC8	; 200
 6cc:	38 f4       	brcc	.+14     	; 0x6dc <ButtonEvents+0xc8>
			sample_rate = 7;
 6ce:	87 e0       	ldi	r24, 0x07	; 7
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <sample_rate+0x1>
 6d6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <sample_rate>
 6da:	08 95       	ret
		else
			sample_rate = 10;
 6dc:	8a e0       	ldi	r24, 0x0A	; 10
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <sample_rate+0x1>
 6e4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <sample_rate>
 6e8:	08 95       	ret
		}
	}

	if(adc_stopped)
	{
		if (sample_flag < 50)
 6ea:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <sample_flag>
 6ee:	82 33       	cpi	r24, 0x32	; 50
 6f0:	d0 f6       	brcc	.-76     	; 0x6a6 <ButtonEvents+0x92>
 6f2:	d2 cf       	rjmp	.-92     	; 0x698 <ButtonEvents+0x84>
 6f4:	08 95       	ret

000006f6 <InitialiseGeneral>:
}

void InitialiseGeneral()
{
	//Port for connecting switches
	DDRB = 0x00;			// Configure PortB direction for Output
 6f6:	14 b8       	out	0x04, r1	; 4
	PORTB = 0x00;			// Set all LEDs initially off (inverted on the board, so '1' = off)
 6f8:	15 b8       	out	0x05, r1	; 5
	//Port for connecting output LED
	DDRC=0xFF;
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00;
 6fe:	18 b8       	out	0x08, r1	; 8

	sei();					// Enable interrupts at global level set Global Interrupt Enable (I) bit
 700:	78 94       	sei
 702:	08 95       	ret

00000704 <InitialiseTimer1>:
}

void InitialiseTimer1()		// Configure to generate an interrupt after a 2-Second interval
{
	TCCR1A = 0b00000000;	// Normal port operation (OC1A, OC1B, OC1C), Clear Timer on 'Compare Match' (CTC) waveform mode)
 704:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00001101;	// CTC waveform mode, use prescaler 1024
 708:	8d e0       	ldi	r24, 0x0D	; 13
 70a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCCR1C = 0b00000000;
 70e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
	
	// For 1 MHz clock (with 1024 prescaler) to achieve a 2 second interval:
	// Need to count 2 million clock cycles (but already divided by 1024)
	// So actually need to count to (2000000 / 1024 =) 1953 decimal, = 7A1 Hex
	OCR1AH = 0x07; // Output Compare Registers (16 bit) OCR1BH and OCR1BL
 712:	87 e0       	ldi	r24, 0x07	; 7
 714:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0xA1; //
 718:	81 ea       	ldi	r24, 0xA1	; 161
 71a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	TCNT1H = 0b00000000;	// Timer/Counter count/value registers (16 bit) TCNT1H and TCNT1L
 71e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	TCNT1L = 0b00000000;
 722:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 = 0b00000010;	// bit 1 OCIE1A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
 72c:	08 95       	ret

0000072e <main>:

int main(void)
{
	/* Replace with your application code */

	InitialiseGeneral();
 72e:	e3 df       	rcall	.-58     	; 0x6f6 <InitialiseGeneral>
	Start_LCD();
 730:	50 df       	rcall	.-352    	; 0x5d2 <Start_LCD>
	USART_SETUP_9600_BAUD_ASSUME_1MHz_CLOCK();
 732:	84 d0       	rcall	.+264    	; 0x83c <USART_SETUP_9600_BAUD_ASSUME_1MHz_CLOCK>
	Initialise_ADC();
 734:	f7 dc       	rcall	.-1554   	; 0x124 <Initialise_ADC>
	InitialiseTimer1();
 736:	e6 df       	rcall	.-52     	; 0x704 <InitialiseTimer1>
	startADC();
 738:	07 dd       	rcall	.-1522   	; 0x148 <startADC>

	while (1)
	{
		ButtonEvents();
 73a:	6c df       	rcall	.-296    	; 0x614 <ButtonEvents>
	}
 73c:	fe cf       	rjmp	.-4      	; 0x73a <main+0xc>

0000073e <__vector_17>:
	TIMSK1 = 0b00000010;	// bit 1 OCIE1A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
	// when the timer reaches the set value (in the OCR1A registers)
}
	
ISR(TIMER1_COMPA_vect) // TIMER1_CompareA_Handler (Interrupt Handler for Timer 1)
{
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	0b b6       	in	r0, 0x3b	; 59
 74a:	0f 92       	push	r0
 74c:	2f 93       	push	r18
 74e:	3f 93       	push	r19
 750:	4f 93       	push	r20
 752:	5f 93       	push	r21
 754:	6f 93       	push	r22
 756:	7f 93       	push	r23
 758:	8f 93       	push	r24
 75a:	9f 93       	push	r25
 75c:	af 93       	push	r26
 75e:	bf 93       	push	r27
 760:	ef 93       	push	r30
 762:	ff 93       	push	r31
	if (ADMUX == CHANNEL0)
 764:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 768:	80 36       	cpi	r24, 0x60	; 96
 76a:	a9 f4       	brne	.+42     	; 0x796 <__vector_17+0x58>
	{
		lcd_gotoxy(3, 1);
 76c:	61 e0       	ldi	r22, 0x01	; 1
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	df dd       	rcall	.-1090   	; 0x330 <lcd_gotoxy>
		lcd_puts("  ");
 772:	82 e2       	ldi	r24, 0x22	; 34
 774:	92 e0       	ldi	r25, 0x02	; 2
 776:	1a de       	rcall	.-972    	; 0x3ac <lcd_puts>
		lcd_gotoxy(3, 1);
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	83 e0       	ldi	r24, 0x03	; 3
 77c:	d9 dd       	rcall	.-1102   	; 0x330 <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 77e:	4a e0       	ldi	r20, 0x0A	; 10
 780:	63 e3       	ldi	r22, 0x33	; 51
 782:	72 e0       	ldi	r23, 0x02	; 2
 784:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <sample_rate>
 788:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <sample_rate+0x1>
 78c:	6e d0       	rcall	.+220    	; 0x86a <__itoa_ncheck>
		itoa(sample_rate, strbuf, 10);
		lcd_puts(strbuf);
 78e:	83 e3       	ldi	r24, 0x33	; 51
 790:	92 e0       	ldi	r25, 0x02	; 2
 792:	0c de       	rcall	.-1000   	; 0x3ac <lcd_puts>
 794:	0e c0       	rjmp	.+28     	; 0x7b2 <__vector_17+0x74>
	}
	else
	{
		lcd_gotoxy(10,1);
 796:	61 e0       	ldi	r22, 0x01	; 1
 798:	8a e0       	ldi	r24, 0x0A	; 10
 79a:	ca dd       	rcall	.-1132   	; 0x330 <lcd_gotoxy>
 79c:	4a e0       	ldi	r20, 0x0A	; 10
 79e:	63 e3       	ldi	r22, 0x33	; 51
 7a0:	72 e0       	ldi	r23, 0x02	; 2
 7a2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 7a6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 7aa:	5f d0       	rcall	.+190    	; 0x86a <__itoa_ncheck>
		itoa(freq, strbuf, 10);
		lcd_puts(strbuf);
 7ac:	83 e3       	ldi	r24, 0x33	; 51
 7ae:	92 e0       	ldi	r25, 0x02	; 2
 7b0:	fd dd       	rcall	.-1030   	; 0x3ac <lcd_puts>
	}
}
 7b2:	ff 91       	pop	r31
 7b4:	ef 91       	pop	r30
 7b6:	bf 91       	pop	r27
 7b8:	af 91       	pop	r26
 7ba:	9f 91       	pop	r25
 7bc:	8f 91       	pop	r24
 7be:	7f 91       	pop	r23
 7c0:	6f 91       	pop	r22
 7c2:	5f 91       	pop	r21
 7c4:	4f 91       	pop	r20
 7c6:	3f 91       	pop	r19
 7c8:	2f 91       	pop	r18
 7ca:	0f 90       	pop	r0
 7cc:	0b be       	out	0x3b, r0	; 59
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <__vector_29>:


ISR(ADC_vect)	// ADC Interrupt Handler
{
 7d8:	1f 92       	push	r1
 7da:	0f 92       	push	r0
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	0f 92       	push	r0
 7e0:	11 24       	eor	r1, r1
 7e2:	0b b6       	in	r0, 0x3b	; 59
 7e4:	0f 92       	push	r0
 7e6:	2f 93       	push	r18
 7e8:	3f 93       	push	r19
 7ea:	4f 93       	push	r20
 7ec:	5f 93       	push	r21
 7ee:	6f 93       	push	r22
 7f0:	7f 93       	push	r23
 7f2:	8f 93       	push	r24
 7f4:	9f 93       	push	r25
 7f6:	af 93       	push	r26
 7f8:	bf 93       	push	r27
 7fa:	ef 93       	push	r30
 7fc:	ff 93       	push	r31
	if (ADMUX == CHANNEL0)
 7fe:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 802:	80 36       	cpi	r24, 0x60	; 96
 804:	29 f4       	brne	.+10     	; 0x810 <__vector_29+0x38>
		sample_flag = ADCH;
 806:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 80a:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <sample_flag>
 80e:	03 c0       	rjmp	.+6      	; 0x816 <__vector_29+0x3e>
	else 
		USART_TX_SingleByte(ADCH);
 810:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 814:	22 d0       	rcall	.+68     	; 0x85a <USART_TX_SingleByte>
 816:	ff 91       	pop	r31
 818:	ef 91       	pop	r30
 81a:	bf 91       	pop	r27
 81c:	af 91       	pop	r26
 81e:	9f 91       	pop	r25
 820:	8f 91       	pop	r24
 822:	7f 91       	pop	r23
 824:	6f 91       	pop	r22
 826:	5f 91       	pop	r21
 828:	4f 91       	pop	r20
 82a:	3f 91       	pop	r19
 82c:	2f 91       	pop	r18
 82e:	0f 90       	pop	r0
 830:	0b be       	out	0x3b, r0	; 59
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0
 838:	1f 90       	pop	r1
 83a:	18 95       	reti

0000083c <USART_SETUP_9600_BAUD_ASSUME_1MHz_CLOCK>:

void USART_SETUP_9600_BAUD_ASSUME_1MHz_CLOCK()
{
	// UCSR0A ?USART Control and Status Register A
	// bit 1 UX2 Double the USART TX speed (also depends Baud Rate Registers)
	UCSR0A = 0b00000010;   // Set U2X (Double USART Tx speed, to reduce clocking error)
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	// bit 6 TXCIE Transmit Complete Interrupt Enable
	// bit 5 UDRIE Data Register Empty Interrupt Enable
	// bit 4 RXEN Receiver Enable
	// bit 3 TXEN Transmitter Enable
	// bit 2 UCSZ2 Character Size (0 = 5,6,7 or 8-bit data,  1 = 9-bit data)
	UCSR0B = 0b10011000;   // RX Complete Int Enable, RX Enable, TX Enable, 8-bit data
 842:	88 e9       	ldi	r24, 0x98	; 152
 844:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	// Bits 7:6 ?UMSELn1:0 USART Mode Select (00 = Asynchronous)
	// bit 5:4 UPM1:0 Parity Mode
	// bit 3 USBS Stop Bit Select
	// bit 2:1 UCSZ1:0 Character Size (see also UCSZ2 in UCSRB)
	// bit 0 UCPOL Clock Polarity
	UCSR0C = 0b00000111;   // Asynchronous, No Parity, 1 stop, 8-bit data, Falling XCK edge
 848:	87 e0       	ldi	r24, 0x07	; 7
 84a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

	// UBRR0 - USART0 Baud Rate Register (16-bit register, comprising UBRR0H and UBRR0L)
	UBRR0H = 0;   // 9600 baud, UBRR = 12, and  U2X must be set to '1' in UCSRA
 84e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = 12;
 852:	8c e0       	ldi	r24, 0x0C	; 12
 854:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 858:	08 95       	ret

0000085a <USART_TX_SingleByte>:



void USART_TX_SingleByte (unsigned char cByte)
{
	while( ! ( UCSR0A  &  ( 1 << UDRE0 ) ) );
 85a:	e0 ec       	ldi	r30, 0xC0	; 192
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	90 81       	ld	r25, Z
 860:	95 ff       	sbrs	r25, 5
 862:	fd cf       	rjmp	.-6      	; 0x85e <USART_TX_SingleByte+0x4>
	// Wait for Tx buffer to be empty (check UDRE flag)
	
	UDR0 = cByte; 	// Writing to the UDR Tx buffer transmits the byte
 864:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 868:	08 95       	ret

0000086a <__itoa_ncheck>:
 86a:	bb 27       	eor	r27, r27
 86c:	4a 30       	cpi	r20, 0x0A	; 10
 86e:	31 f4       	brne	.+12     	; 0x87c <__itoa_ncheck+0x12>
 870:	99 23       	and	r25, r25
 872:	22 f4       	brpl	.+8      	; 0x87c <__itoa_ncheck+0x12>
 874:	bd e2       	ldi	r27, 0x2D	; 45
 876:	90 95       	com	r25
 878:	81 95       	neg	r24
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	01 c0       	rjmp	.+2      	; 0x880 <__utoa_common>

0000087e <__utoa_ncheck>:
 87e:	bb 27       	eor	r27, r27

00000880 <__utoa_common>:
 880:	fb 01       	movw	r30, r22
 882:	55 27       	eor	r21, r21
 884:	aa 27       	eor	r26, r26
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	aa 1f       	adc	r26, r26
 88c:	a4 17       	cp	r26, r20
 88e:	10 f0       	brcs	.+4      	; 0x894 <__utoa_common+0x14>
 890:	a4 1b       	sub	r26, r20
 892:	83 95       	inc	r24
 894:	50 51       	subi	r21, 0x10	; 16
 896:	b9 f7       	brne	.-18     	; 0x886 <__utoa_common+0x6>
 898:	a0 5d       	subi	r26, 0xD0	; 208
 89a:	aa 33       	cpi	r26, 0x3A	; 58
 89c:	08 f0       	brcs	.+2      	; 0x8a0 <__utoa_common+0x20>
 89e:	a9 5d       	subi	r26, 0xD9	; 217
 8a0:	a1 93       	st	Z+, r26
 8a2:	00 97       	sbiw	r24, 0x00	; 0
 8a4:	79 f7       	brne	.-34     	; 0x884 <__utoa_common+0x4>
 8a6:	b1 11       	cpse	r27, r1
 8a8:	b1 93       	st	Z+, r27
 8aa:	11 92       	st	Z+, r1
 8ac:	cb 01       	movw	r24, r22
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <strrev>

000008b0 <strrev>:
 8b0:	dc 01       	movw	r26, r24
 8b2:	fc 01       	movw	r30, r24
 8b4:	67 2f       	mov	r22, r23
 8b6:	71 91       	ld	r23, Z+
 8b8:	77 23       	and	r23, r23
 8ba:	e1 f7       	brne	.-8      	; 0x8b4 <strrev+0x4>
 8bc:	32 97       	sbiw	r30, 0x02	; 2
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <strrev+0x18>
 8c0:	7c 91       	ld	r23, X
 8c2:	6d 93       	st	X+, r22
 8c4:	70 83       	st	Z, r23
 8c6:	62 91       	ld	r22, -Z
 8c8:	ae 17       	cp	r26, r30
 8ca:	bf 07       	cpc	r27, r31
 8cc:	c8 f3       	brcs	.-14     	; 0x8c0 <strrev+0x10>
 8ce:	08 95       	ret

000008d0 <_exit>:
 8d0:	f8 94       	cli

000008d2 <__stop_program>:
 8d2:	ff cf       	rjmp	.-2      	; 0x8d2 <__stop_program>
